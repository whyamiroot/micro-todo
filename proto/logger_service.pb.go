// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logger_service.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LoggerService service

type LoggerServiceClient interface {
	GetHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Health, error)
	AddLog(ctx context.Context, in *LogEntry, opts ...grpc.CallOption) (*LoggerResponse, error)
	GetLogStream(ctx context.Context, in *SignedServiceInfo, opts ...grpc.CallOption) (LoggerService_GetLogStreamClient, error)
	GetLogStreamWithConstraint(ctx context.Context, in *ConstraintedLogRequest, opts ...grpc.CallOption) (LoggerService_GetLogStreamWithConstraintClient, error)
	GetLogEntriesCount(ctx context.Context, in *SignedServiceInfo, opts ...grpc.CallOption) (*LogEntriesCount, error)
}

type loggerServiceClient struct {
	cc *grpc.ClientConn
}

func NewLoggerServiceClient(cc *grpc.ClientConn) LoggerServiceClient {
	return &loggerServiceClient{cc}
}

func (c *loggerServiceClient) GetHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := grpc.Invoke(ctx, "/proto.LoggerService/GetHealth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerServiceClient) AddLog(ctx context.Context, in *LogEntry, opts ...grpc.CallOption) (*LoggerResponse, error) {
	out := new(LoggerResponse)
	err := grpc.Invoke(ctx, "/proto.LoggerService/AddLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerServiceClient) GetLogStream(ctx context.Context, in *SignedServiceInfo, opts ...grpc.CallOption) (LoggerService_GetLogStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_LoggerService_serviceDesc.Streams[0], c.cc, "/proto.LoggerService/GetLogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &loggerServiceGetLogStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LoggerService_GetLogStreamClient interface {
	Recv() (*LogEntry, error)
	grpc.ClientStream
}

type loggerServiceGetLogStreamClient struct {
	grpc.ClientStream
}

func (x *loggerServiceGetLogStreamClient) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *loggerServiceClient) GetLogStreamWithConstraint(ctx context.Context, in *ConstraintedLogRequest, opts ...grpc.CallOption) (LoggerService_GetLogStreamWithConstraintClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_LoggerService_serviceDesc.Streams[1], c.cc, "/proto.LoggerService/GetLogStreamWithConstraint", opts...)
	if err != nil {
		return nil, err
	}
	x := &loggerServiceGetLogStreamWithConstraintClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LoggerService_GetLogStreamWithConstraintClient interface {
	Recv() (*LogEntry, error)
	grpc.ClientStream
}

type loggerServiceGetLogStreamWithConstraintClient struct {
	grpc.ClientStream
}

func (x *loggerServiceGetLogStreamWithConstraintClient) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *loggerServiceClient) GetLogEntriesCount(ctx context.Context, in *SignedServiceInfo, opts ...grpc.CallOption) (*LogEntriesCount, error) {
	out := new(LogEntriesCount)
	err := grpc.Invoke(ctx, "/proto.LoggerService/GetLogEntriesCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LoggerService service

type LoggerServiceServer interface {
	GetHealth(context.Context, *Empty) (*Health, error)
	AddLog(context.Context, *LogEntry) (*LoggerResponse, error)
	GetLogStream(*SignedServiceInfo, LoggerService_GetLogStreamServer) error
	GetLogStreamWithConstraint(*ConstraintedLogRequest, LoggerService_GetLogStreamWithConstraintServer) error
	GetLogEntriesCount(context.Context, *SignedServiceInfo) (*LogEntriesCount, error)
}

func RegisterLoggerServiceServer(s *grpc.Server, srv LoggerServiceServer) {
	s.RegisterService(&_LoggerService_serviceDesc, srv)
}

func _LoggerService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LoggerService/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServiceServer).GetHealth(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoggerService_AddLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServiceServer).AddLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LoggerService/AddLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServiceServer).AddLog(ctx, req.(*LogEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoggerService_GetLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SignedServiceInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LoggerServiceServer).GetLogStream(m, &loggerServiceGetLogStreamServer{stream})
}

type LoggerService_GetLogStreamServer interface {
	Send(*LogEntry) error
	grpc.ServerStream
}

type loggerServiceGetLogStreamServer struct {
	grpc.ServerStream
}

func (x *loggerServiceGetLogStreamServer) Send(m *LogEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _LoggerService_GetLogStreamWithConstraint_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConstraintedLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LoggerServiceServer).GetLogStreamWithConstraint(m, &loggerServiceGetLogStreamWithConstraintServer{stream})
}

type LoggerService_GetLogStreamWithConstraintServer interface {
	Send(*LogEntry) error
	grpc.ServerStream
}

type loggerServiceGetLogStreamWithConstraintServer struct {
	grpc.ServerStream
}

func (x *loggerServiceGetLogStreamWithConstraintServer) Send(m *LogEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _LoggerService_GetLogEntriesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServiceServer).GetLogEntriesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LoggerService/GetLogEntriesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServiceServer).GetLogEntriesCount(ctx, req.(*SignedServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoggerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LoggerService",
	HandlerType: (*LoggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _LoggerService_GetHealth_Handler,
		},
		{
			MethodName: "AddLog",
			Handler:    _LoggerService_AddLog_Handler,
		},
		{
			MethodName: "GetLogEntriesCount",
			Handler:    _LoggerService_GetLogEntriesCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLogStream",
			Handler:       _LoggerService_GetLogStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetLogStreamWithConstraint",
			Handler:       _LoggerService_GetLogStreamWithConstraint_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "logger_service.proto",
}

func init() { proto1.RegisterFile("logger_service.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8f, 0x41, 0x6b, 0x1a, 0x41,
	0x14, 0xc7, 0xd9, 0xd2, 0x0a, 0x5d, 0xdc, 0xb6, 0x3c, 0xaa, 0xc8, 0xd2, 0x5e, 0xb6, 0xed, 0xc5,
	0x82, 0x23, 0xe6, 0x12, 0x72, 0x4a, 0x10, 0x31, 0x09, 0x7b, 0xd2, 0x43, 0x8e, 0x61, 0xe2, 0xbe,
	0xcc, 0x0e, 0xac, 0x33, 0x9b, 0x99, 0x67, 0x88, 0x88, 0x97, 0x1c, 0x42, 0xee, 0xf9, 0x68, 0xf9,
	0x0a, 0xf9, 0x20, 0xc1, 0x99, 0x15, 0x35, 0x42, 0xc8, 0x69, 0x99, 0xb7, 0xef, 0xff, 0xfb, 0xfd,
	0x5f, 0xf8, 0xb3, 0xd0, 0x42, 0xa0, 0xb9, 0xb4, 0x68, 0x6e, 0xe5, 0x04, 0x3b, 0xa5, 0xd1, 0xa4,
	0xe1, 0x8b, 0xfb, 0xc4, 0xbf, 0x84, 0xd6, 0xa2, 0x40, 0xc6, 0x4b, 0xc9, 0xb8, 0x52, 0x9a, 0x38,
	0x49, 0xad, 0xac, 0x5f, 0x8a, 0x1b, 0x55, 0x74, 0x8a, 0xd6, 0x72, 0x81, 0xeb, 0x71, 0x24, 0x50,
	0xa1, 0xe1, 0x85, 0x7f, 0xf6, 0x1e, 0x3e, 0x87, 0x51, 0xea, 0x16, 0xc7, 0x5e, 0x01, 0xc7, 0xe1,
	0xd7, 0x21, 0xd2, 0x29, 0xf2, 0x82, 0x72, 0xa8, 0xfb, 0xb5, 0xce, 0x60, 0x5a, 0xd2, 0x3c, 0x8e,
	0xaa, 0x97, 0xff, 0x99, 0x34, 0xef, 0x9f, 0x5f, 0x9e, 0x3e, 0xfd, 0x80, 0x6f, 0xcc, 0xab, 0x58,
	0xee, 0x43, 0xe7, 0x61, 0xed, 0x24, 0xcb, 0x52, 0x2d, 0xe0, 0x7b, 0x15, 0x48, 0xb5, 0x18, 0x28,
	0x32, 0xf3, 0xb8, 0xb1, 0x19, 0x08, 0x34, 0x23, 0xb4, 0xa5, 0x56, 0x16, 0x93, 0x96, 0x23, 0x41,
	0x12, 0xad, 0x49, 0xb8, 0xda, 0x3e, 0x0a, 0xda, 0x90, 0x87, 0xf5, 0x21, 0x52, 0xaa, 0xc5, 0x98,
	0x0c, 0xf2, 0x29, 0xb4, 0x2a, 0xc0, 0x58, 0x0a, 0x85, 0x59, 0xd5, 0xf9, 0x4c, 0x5d, 0xeb, 0xf8,
	0xad, 0x2b, 0xf9, 0xef, 0xa0, 0xff, 0xe0, 0xcf, 0x0e, 0x94, 0x59, 0x07, 0x62, 0x0b, 0x9a, 0x97,
	0xb8, 0x64, 0x0b, 0xa9, 0x32, 0xbc, 0x5b, 0x76, 0x03, 0x78, 0x0c, 0xc2, 0x78, 0x5b, 0x75, 0x21,
	0x29, 0xef, 0x6b, 0x65, 0xc9, 0x70, 0xa9, 0x08, 0x7e, 0x57, 0xf8, 0xcd, 0x08, 0x57, 0x27, 0x8e,
	0xf0, 0x66, 0x86, 0x96, 0xf6, 0xed, 0x87, 0xce, 0xde, 0x83, 0xee, 0x07, 0xec, 0x6c, 0xb2, 0x05,
	0xed, 0x06, 0x60, 0x42, 0xf0, 0x4d, 0x56, 0x28, 0x89, 0xb6, 0xaf, 0x67, 0x8a, 0xde, 0x39, 0xbd,
	0xb9, 0x2b, 0x5f, 0x27, 0x92, 0xb6, 0xeb, 0xf0, 0x17, 0x92, 0xdd, 0x0e, 0x7b, 0xf2, 0x99, 0xa2,
	0xab, 0x9a, 0x43, 0x1c, 0xbc, 0x06, 0x00, 0x00, 0xff, 0xff, 0x25, 0x0f, 0x6e, 0xd9, 0x72, 0x02,
	0x00, 0x00,
}
